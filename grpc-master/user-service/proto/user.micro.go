// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Userservice service

type UserserviceService interface {
	Create(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	Get(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Auth(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error)
	ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error)
}

type userserviceService struct {
	c    client.Client
	name string
}

func NewUserserviceService(name string, c client.Client) UserserviceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &userserviceService{
		c:    c,
		name: name,
	}
}

func (c *userserviceService) Create(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Userservice.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceService) Get(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Userservice.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceService) GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Userservice.GetAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceService) Auth(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Userservice.Auth", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceService) ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Userservice.ValidateToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Userservice service

type UserserviceHandler interface {
	Create(context.Context, *User, *Response) error
	Get(context.Context, *User, *Response) error
	GetAll(context.Context, *Request, *Response) error
	Auth(context.Context, *User, *Token) error
	ValidateToken(context.Context, *Token, *Token) error
}

func RegisterUserserviceHandler(s server.Server, hdlr UserserviceHandler, opts ...server.HandlerOption) error {
	type userservice interface {
		Create(ctx context.Context, in *User, out *Response) error
		Get(ctx context.Context, in *User, out *Response) error
		GetAll(ctx context.Context, in *Request, out *Response) error
		Auth(ctx context.Context, in *User, out *Token) error
		ValidateToken(ctx context.Context, in *Token, out *Token) error
	}
	type Userservice struct {
		userservice
	}
	h := &userserviceHandler{hdlr}
	return s.Handle(s.NewHandler(&Userservice{h}, opts...))
}

type userserviceHandler struct {
	UserserviceHandler
}

func (h *userserviceHandler) Create(ctx context.Context, in *User, out *Response) error {
	return h.UserserviceHandler.Create(ctx, in, out)
}

func (h *userserviceHandler) Get(ctx context.Context, in *User, out *Response) error {
	return h.UserserviceHandler.Get(ctx, in, out)
}

func (h *userserviceHandler) GetAll(ctx context.Context, in *Request, out *Response) error {
	return h.UserserviceHandler.GetAll(ctx, in, out)
}

func (h *userserviceHandler) Auth(ctx context.Context, in *User, out *Token) error {
	return h.UserserviceHandler.Auth(ctx, in, out)
}

func (h *userserviceHandler) ValidateToken(ctx context.Context, in *Token, out *Token) error {
	return h.UserserviceHandler.ValidateToken(ctx, in, out)
}
